"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è PrometeyLabs Bot
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ ZenEdu –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –∫—É—Ä—Å—ñ–≤
"""

import logging
from typing import Optional
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import CALLBACK_PREFIXES
from db import get_course, add_purchase, grant_course_access, get_user
from services.zenedu_client import (
    grant_course_access_to_user, 
    get_course_access_link,
    zenedu_client
)
from middleware.auth import is_admin

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data.startswith(f"{CALLBACK_PREFIXES['payment']}"))
async def payment_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤ —á–µ—Ä–µ–∑ ZenEdu"""
    user_id = callback.from_user.id
    action = callback.data.split(":", 1)[1]
    
    try:
        if action.startswith("buy_"):
            # –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å—É
            course_id = int(action.split("_")[1])
            await handle_course_purchase(callback, course_id)
            
        elif action.startswith("access_"):
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É–ø–ª–µ–Ω–æ–≥–æ –∫—É—Ä—Å—É
            course_id = int(action.split("_")[1])
            await handle_course_access(callback, course_id)
            
        elif action == "methods":
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏
            await show_payment_methods(callback)
            
        else:
            await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –ø–ª–∞—Ç–µ–∂—É", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ payment_handler: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

async def handle_course_purchase(callback: CallbackQuery, course_id: int):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å—É"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
        course = await get_course(course_id)
        if not course:
            await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø
        from db import check_course_access
        has_access = await check_course_access(user_id, course_id)
        if has_access:
            await callback.answer("‚úÖ –£ –≤–∞—Å –≤–∂–µ —î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É!", show_alert=True)
            return
        
        # –î–ª—è ZenEdu –ø–æ–∫—É–ø–∫–∏ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ —ó—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ –≤ ZenEdu
        subscriber_created = await zenedu_client.create_subscriber(
            user_id=user_id,
            username=username,
            first_name=callback.from_user.first_name
        )
        
        if not subscriber_created:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ –∫—É—Ä—Å—ñ–≤", show_alert=True)
            return
        
        # –ù–∞–¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ ZenEdu
        zenedu_id = course.get('zenedu_id') or str(course_id)
        access_granted = await grant_course_access_to_user(zenedu_id, user_id)
        
        if access_granted:
            # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–∫—É–ø–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—É –ë–î
            purchase_id = await add_purchase(
                user_id=user_id,
                course_id=course_id,
                amount=course['price_uah'],
                payment_method='zenedu',
                payment_status='completed'
            )
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
            access_link = await get_course_access_link(zenedu_id, user_id)
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –ø–æ–∫—É–ø–∫—É
            success_text = f"üéâ –í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é!\n\n"
            success_text += f"üìö **{course['title']}**\n"
            success_text += f"üí∞ –°–ø–ª–∞—á–µ–Ω–æ: {course['price_uah']} ‚Ç¥\n\n"
            
            keyboard = []
            
            if access_link:
                success_text += f"üéì –í–∞—à –∫—É—Ä—Å –≥–æ—Ç–æ–≤–∏–π –¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è!\n"
                success_text += f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏:"
                keyboard.append([
                    InlineKeyboardButton(
                        text="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", 
                        url=access_link
                    )
                ])
            else:
                success_text += f"üìß –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                keyboard.append([
                    InlineKeyboardButton(
                        text="üéì –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø", 
                        callback_data=f"{CALLBACK_PREFIXES['payment']}access_{course_id}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –î–æ –∫—É—Ä—Å—ñ–≤", 
                    callback_data=f"{CALLBACK_PREFIXES['course']}main"
                )
            ])
            
            await callback.message.edit_text(
                success_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="Markdown"
            )
            
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–≤ –∫—É—Ä—Å {course_id} —á–µ—Ä–µ–∑ ZenEdu")
            
        else:
            # –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
            await callback.message.edit_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏**\n\n"
                f"–ö—É—Ä—Å: {course['title']}\n"
                f"–°—É–º–∞: {course['price_uah']} ‚Ç¥\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ @PrometeyLabs",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"crs:view_{course_id}")]
                ]),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å—É {course_id}: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.", show_alert=True)

async def handle_course_access(callback: CallbackQuery, course_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É–ø–ª–µ–Ω–æ–≥–æ –∫—É—Ä—Å—É"""
    user_id = callback.from_user.id
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–æ—Å—Ç—É–ø —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        from db import check_course_access
        has_access = await check_course_access(user_id, course_id)
        
        if not has_access:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å
        course = await get_course(course_id)
        if not course:
            await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É —á–µ—Ä–µ–∑ ZenEdu
        zenedu_id = course.get('zenedu_id') or str(course_id)
        access_link = await get_course_access_link(zenedu_id, user_id)
        
        if access_link:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", url=access_link)],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –∫—É—Ä—Å—ñ–≤", callback_data=f"{CALLBACK_PREFIXES['course']}main")]
            ])
            
            await callback.message.edit_text(
                f"üéì **{course['title']}**\n\n"
                f"‚úÖ –£ –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É!\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –Ø–∫—â–æ —î –ª–æ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            if course.get('z_link') and not course['z_link'].startswith('zenedu://'):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", url=course['z_link'])],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –∫—É—Ä—Å—ñ–≤", callback_data=f"{CALLBACK_PREFIXES['course']}main")]
                ])
                
                await callback.message.edit_text(
                    f"üéì **{course['title']}**\n\n"
                    f"‚úÖ –£ –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É!",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("‚è≥ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≥–æ—Ç—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.", show_alert=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É {course_id}: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É", show_alert=True)

async def show_payment_methods(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏"""
    user_id = callback.from_user.id
    
    text = """üí≥ **–ú–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏**

üè™ **ZenEdu Platform**
‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–∞—Ä—Ç–∫–∏ (Visa, MasterCard)
‚Ä¢ Apple Pay / Google Pay
‚Ä¢ –ü—Ä–∏–≤–∞—Ç24, –ú–æ–Ω–æ–±–∞–Ω–∫
‚Ä¢ –ë–µ–∑–ø–µ—á–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ —á–µ—Ä–µ–∑ ZenEdu

üí∞ **–ü–µ—Ä–µ–≤–∞–≥–∏:**
‚úÖ –ú–∏—Ç—Ç—î–≤–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—ñ–≤
‚úÖ –ó–∞—Ö–∏—Å—Ç –ø–æ–∫—É–ø—Ü—è
‚úÖ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —á–µ–∫–∏
‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏

üìû **–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:** @PrometeyLabs"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫—É—Ä—Å–∞–º–∏ ZenEdu
@router.callback_query(F.data.startswith("admin_grant_course:"))
async def admin_grant_course_handler(callback: CallbackQuery):
    """–ê–¥–º—ñ–Ω –≤–∏–¥–∞—á–∞ –∫—É—Ä—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    admin_user_id = callback.from_user.id
    
    if not await is_admin(admin_user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        data_parts = callback.data.split(":")
        target_user_id = int(data_parts[1])
        course_id = int(data_parts[2])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å
        course = await get_course(course_id)
        if not course:
            await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ù–∞–¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ ZenEdu
        zenedu_id = course.get('zenedu_id') or str(course_id)
        access_granted = await grant_course_access_to_user(zenedu_id, target_user_id)
        
        if access_granted:
            # –ó–∞–ø–∏—Å—É—î–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –ø–æ–∫—É–ø–∫—É
            await add_purchase(
                user_id=target_user_id,
                course_id=course_id,
                amount=0,
                payment_method='admin_grant',
                payment_status='completed'
            )
            
            await callback.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É '{course['title']}' –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}", show_alert=True)
            logger.info(f"üéÅ –ê–¥–º—ñ–Ω {admin_user_id} –Ω–∞–¥–∞–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É {course_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ admin_grant_course_handler: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó", show_alert=True) 