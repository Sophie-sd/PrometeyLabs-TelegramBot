"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è PrometeyLabs Bot
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Any
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID, CALLBACK_PREFIXES
from db import (
    get_users_count, get_active_users_count, get_new_users_count,
    get_courses_count, get_purchases_count, get_users_with_purchases_count,
    get_daily_interactions, get_weekly_interactions,
    get_users_by_segment, save_broadcast, get_scheduled_broadcasts, get_broadcast_history,
    save_recurring_broadcast, get_active_recurring_broadcasts,
    delete_scheduled_broadcast, delete_recurring_broadcast,
    get_broadcast_by_id, get_recurring_broadcast_by_id,
    search_users, get_users_list, get_user_purchases, get_all_purchases,
    get_purchases_stats, block_user, get_user
)
from keyboards import (
    admin_main_menu, admin_broadcasts_menu, admin_users_menu,
    admin_courses_menu, admin_settings_menu, admin_back_to_main,
    main_menu, broadcast_audience_keyboard, broadcast_schedule_keyboard,
    broadcast_confirm_keyboard, broadcast_back_to_menu_keyboard,
    broadcast_recurring_type_keyboard, broadcast_datetime_keyboard,
    broadcast_scheduled_list_keyboard, broadcast_delete_confirm_keyboard,
    users_list_pagination_keyboard, user_detail_keyboard, purchases_list_keyboard,
    back_to_users_keyboard, cancel_search_keyboard, user_message_keyboard
)
from messages import (
    ADMIN_WELCOME_MESSAGE, ADMIN_ANALYTICS_MESSAGE,
    ADMIN_COURSES_SYNC_MESSAGE, ADMIN_COURSES_SYNC_SUCCESS, ADMIN_COURSES_SYNC_ERROR,
    ERROR_MESSAGE
)
from services.zenedu_client import sync_courses, check_zenedu_connection
from middleware.auth import is_admin
from states.broadcast_states import BroadcastStates, UserManagementStates

logger = logging.getLogger(__name__)
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /admin
@router.message(Command('admin'))
async def admin_command(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin"""
    user_id = message.from_user.id
    logger.info(f"üîê –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /admin –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    if not await is_admin(user_id):
        logger.warning(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")
        await message.answer("üîí –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É @PrometeyLabs.")
        return
    
    try:
        await message.answer(
            ADMIN_WELCOME_MESSAGE,
            reply_markup=admin_main_menu()
        )
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω {user_id} (@PrometeyLabs) –≤—ñ–¥–∫—Ä–∏–≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ admin_command: {str(e)}", exc_info=True)
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ì–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω –º–µ–Ω—é
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}main")
async def admin_main_handler(callback: CallbackQuery):
    """–ì–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    user_id = callback.from_user.id
    logger.info(f"üîÑ Callback {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    if not await is_admin(user_id):
        logger.warning(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            ADMIN_WELCOME_MESSAGE,
            reply_markup=admin_main_menu()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω {user_id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ admin_main_handler: {str(e)}", exc_info=True)
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é")

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}user_mode")
async def admin_user_mode_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = callback.from_user.id
    logger.info(f"üîÑ Callback {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        from messages import WELCOME_MESSAGE
        from keyboards import admin_user_mode_menu
        
        await callback.message.edit_text(
            "üë§ –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n" + WELCOME_MESSAGE,
            reply_markup=admin_user_mode_menu()
        )
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–≤—Å—è –≤ —Ä–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_user_mode_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É")

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —Ä–µ–∂–∏–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data == "return_to_admin")
async def return_to_admin_handler(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —Ä–µ–∂–∏–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            ADMIN_WELCOME_MESSAGE,
            reply_markup=admin_main_menu()
        )
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É –ø–∞–Ω–µ–ª—å")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ return_to_admin_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")

# –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}analytics")
async def admin_analytics_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    logger.info(f"üìä –ó–∞–ø–∏—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    if not await is_admin(user_id):
        logger.warning(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        logger.info("üîÑ –ó–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = await get_users_count()
        new_users_day = await get_new_users_count(days=1)
        new_users_week = await get_new_users_count(days=7)
        new_users_month = await get_new_users_count(days=30)
        active_week = await get_active_users_count(days=7)
        course_purchases = await get_purchases_count()
        users_with_purchases = await get_users_with_purchases_count()
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—ó
        daily_interactions = await get_daily_interactions()
        weekly_interactions = await get_weekly_interactions()
        
        analytics_text = ADMIN_ANALYTICS_MESSAGE.format(
            users_count=total_users,
            new_users_day=new_users_day,
            new_users_week=new_users_week,
            new_users_month=new_users_month,
            active_week=active_week,
            course_purchases=course_purchases,
            users_with_purchases=users_with_purchases,
            daily_interactions=daily_interactions,
            weekly_interactions=weekly_interactions
        )
        
        logger.info("üìä –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∞–Ω–∞–ª—ñ—Ç–∏–∫—É...")
        await callback.message.edit_text(
            analytics_text,
            reply_markup=admin_back_to_main()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ admin_analytics_handler: {str(e)}", exc_info=True)
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}users")
async def admin_users_handler(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            "üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_users_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_users_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

# –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}courses")
async def admin_courses_handler(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            "üéì –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_courses_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_courses_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∫—É—Ä—Å—ñ–≤")

# –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑ ZenEdu
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}sync_courses")
async def admin_sync_courses_handler(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑ ZenEdu"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        await callback.message.edit_text(
            ADMIN_COURSES_SYNC_MESSAGE,
            reply_markup=admin_back_to_main()
        )
        await callback.answer()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ZenEdu
        if not await check_zenedu_connection():
            await callback.message.edit_text(
                ADMIN_COURSES_SYNC_ERROR,
                reply_markup=admin_back_to_main()
            )
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        synced_courses = await sync_courses()
        total_courses = await get_courses_count()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            ADMIN_COURSES_SYNC_SUCCESS.format(
                synced_count=synced_courses,
                total_count=total_courses
            ),
            reply_markup=admin_back_to_main()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_sync_courses_handler: {e}")
        await callback.message.edit_text(
            ADMIN_COURSES_SYNC_ERROR,
            reply_markup=admin_back_to_main()
        )

# –†–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}broadcasts")
async def admin_broadcasts_handler(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–æ–∑—Å–∏–ª–æ–∫"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            "üì¨ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_broadcasts_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_broadcasts_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Ä–æ–∑—Å–∏–ª–æ–∫")

# –ù–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}broadcast_new")
async def admin_broadcast_new_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
        await state.clear()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.waiting_for_message)
        
        await callback.message.edit_text(
            "üì¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
            "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n"
            "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –º–µ–¥—ñ–∞ (—Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ).",
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–æ—á–∞–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_broadcast_new_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏")

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏
@router.message(BroadcastStates.waiting_for_message)
async def broadcast_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É/–º–µ–¥—ñ–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_text = message.text or message.caption or ""
        if not message_text:
            await message.answer(
                "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç.\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏.",
                reply_markup=broadcast_back_to_menu_keyboard()
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ —Å—Ç–∞–Ω
        await state.update_data(
            message_text=message_text,
            message_id=message.message_id
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
        await state.set_state(BroadcastStates.selecting_audience)
        
        await message.answer(
            "üë• –û–±–µ—Ä—ñ—Ç—å –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=broadcast_audience_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤–≤—ñ–≤ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏: {message_text[:50]}...")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_message_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
@router.callback_query(F.data.startswith("broadcast:audience_"), BroadcastStates.selecting_audience)
async def broadcast_audience_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        audience_type = callback.data.split("_")[1]  # all, buyers, inactive
        
        audience_names = {
            "all": "üë• –£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            "buyers": "üí∞ –ü–æ–∫—É–ø—Ü—ñ –∫—É—Ä—Å—ñ–≤", 
            "inactive": "üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ 7+ –¥–Ω—ñ–≤"
        }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ
        users_count = len(await get_users_by_segment(audience_type))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ –û–î–†–ê–ó–£
        if users_count == 0:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ: {audience_names[audience_type]}\n\n"
                "üë• –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:",
                reply_markup=broadcast_audience_keyboard()
            )
            await callback.answer()
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–±—Ä–∞–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç: {audience_type}")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
        await state.update_data(
            audience_type=audience_type,
            audience_name=audience_names[audience_type],
            users_count=users_count
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        await state.set_state(BroadcastStates.selecting_schedule)
        
        await callback.message.edit_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: {audience_names[audience_type]}\n"
            f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ: {users_count}\n\n"
            f"üìÖ –ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?",
            reply_markup=broadcast_schedule_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–±—Ä–∞–≤ –∞—É–¥–∏—Ç–æ—Ä—ñ—é: {audience_type} ({users_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_audience_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó")

# –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}broadcast_scheduled")
async def admin_broadcast_scheduled_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        scheduled = await get_scheduled_broadcasts()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        recurring = await get_active_recurring_broadcasts()
        
        text = "üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é
        if scheduled:
            text += "üìÖ **–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ:**\n"
            for i, broadcast in enumerate(scheduled, 1):
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –±–µ–∑ "T" –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                scheduled_time = broadcast['scheduled_for']
                if 'T' in scheduled_time:
                    try:
                        # –ü–∞—Ä—Å–∏–º–æ ISO —Ñ–æ—Ä–º–∞—Ç —ñ –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•
                        from datetime import datetime
                        dt = datetime.fromisoformat(scheduled_time.replace('T', ' '))
                        formatted_time = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –ø–∞—Ä—Å–∏—Ç–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–º—ñ–Ω—é—î–º–æ T –Ω–∞ –ø—Ä–æ–±—ñ–ª
                        formatted_time = scheduled_time.replace('T', ' ')
                else:
                    formatted_time = scheduled_time
                
                text += f"**#{i}** üìù {broadcast['message_text'][:25]}...\n"
                text += f"üë• {broadcast['audience_type']}\n"
                text += f"üìÖ {formatted_time}\n\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –∑ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º –Ω—É–º–µ—Ä–∞—Ü—ñ—ó
        if recurring:
            text += "üîÑ **–†–µ–≥—É–ª—è—Ä–Ω—ñ:**\n"
            scheduled_count = len(scheduled)
            for i, broadcast in enumerate(recurring, scheduled_count + 1):
                text += f"**#{i}** üìù {broadcast['message_text'][:25]}...\n"
                text += f"üë• {broadcast['audience_type']}\n"
                text += f"üîÑ {broadcast['recurring_type']}\n\n"
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
        if not scheduled and not recurring:
            text += "–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫."
            await callback.message.edit_text(
                text,
                reply_markup=broadcast_back_to_menu_keyboard()
            )
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            text += "üóëÔ∏è **–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:**"
            await callback.message.edit_text(
                text,
                reply_markup=broadcast_scheduled_list_keyboard(scheduled, recurring),
                parse_mode="Markdown"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_broadcast_scheduled_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫")

# –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∏–ª–æ–∫
@router.callback_query(F.data == f"{CALLBACK_PREFIXES['admin']}broadcast_history")
async def admin_broadcast_history_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—Å–∏–ª–æ–∫"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        history = await get_broadcast_history(10)
        
        if not history:
            text = "üïì –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∏–ª–æ–∫\n\n" \
                   "–†–æ–∑—Å–∏–ª–∫–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏—Å—å."
        else:
            text = "üïì –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Å–∏–ª–æ–∫\n\n"
            for broadcast in history:
                status_emoji = "‚úÖ" if broadcast['status'] == 'sent' else "‚ùå"
                text += f"{status_emoji} {broadcast['message_text']}\n"
                text += f"üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {broadcast['audience_type']}\n"
                text += f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {broadcast['created_at']}\n"
                if broadcast.get('sent_at'):
                    text += f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {broadcast['sent_at']}\n"
                text += "\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_broadcast_history_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—Å–∏–ª–æ–∫")

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
@router.callback_query(F.data.startswith("delete_scheduled:"))
async def broadcast_delete_scheduled_handler(callback: CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        broadcast_id = int(callback.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        broadcast = await get_broadcast_by_id(broadcast_id)
        
        if not broadcast:
            await callback.answer("‚ùå –†–æ–∑—Å–∏–ª–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –±–µ–∑ "T"
        scheduled_time = broadcast['scheduled_for']
        if 'T' in scheduled_time:
            try:
                dt = datetime.fromisoformat(scheduled_time.replace('T', ' '))
                formatted_time = dt.strftime("%d.%m.%Y %H:%M")
            except:
                formatted_time = scheduled_time.replace('T', ' ')
        else:
            formatted_time = scheduled_time
        
        confirm_text = f"""
üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏**

üìù **–¢–µ–∫—Å—Ç:** {broadcast['message_text'][:50]}...
üë• **–ê—É–¥–∏—Ç–æ—Ä—ñ—è:** {broadcast['audience_type']}
üìÖ **–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:** {formatted_time}

‚ö†Ô∏è **–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!**

–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ä–æ–∑—Å–∏–ª–∫—É?
        """
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=broadcast_delete_confirm_keyboard("scheduled", broadcast_id),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ {broadcast_id}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_delete_scheduled_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

@router.callback_query(F.data.startswith("delete_recurring:"))
async def broadcast_delete_recurring_handler(callback: CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        broadcast_id = int(callback.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        broadcast = await get_recurring_broadcast_by_id(broadcast_id)
        
        if not broadcast:
            await callback.answer("‚ùå –†–æ–∑—Å–∏–ª–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        confirm_text = f"""
üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏**

üìù **–¢–µ–∫—Å—Ç:** {broadcast['message_text'][:50]}...
üë• **–ê—É–¥–∏—Ç–æ—Ä—ñ—è:** {broadcast['audience_type']}
üîÑ **–¢–∏–ø:** {broadcast['recurring_type']}
‚öôÔ∏è **CRON:** {broadcast.get('cron_expression', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π')}

‚ö†Ô∏è **–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!**

–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É?
        """
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=broadcast_delete_confirm_keyboard("recurring", broadcast_id),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ {broadcast_id}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_delete_recurring_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

@router.callback_query(F.data.startswith("confirm_delete_scheduled:"))
async def broadcast_confirm_delete_scheduled_handler(callback: CallbackQuery):
    """–§–∞–∫—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        broadcast_id = int(callback.data.split(":")[1])
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
        success = await delete_scheduled_broadcast(broadcast_id)
        
        if success:
            await callback.answer("‚úÖ –†–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
            await admin_broadcast_scheduled_handler(callback)
            
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤–∏–¥–∞–ª–∏–≤ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É {broadcast_id}")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏", show_alert=True)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_confirm_delete_scheduled_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏")

@router.callback_query(F.data.startswith("confirm_delete_recurring:"))
async def broadcast_confirm_delete_recurring_handler(callback: CallbackQuery):
    """–§–∞–∫—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        broadcast_id = int(callback.data.split(":")[1])
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É
        success = await delete_recurring_broadcast(broadcast_id)
        
        if success:
            await callback.answer("‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
            await admin_broadcast_scheduled_handler(callback)
            
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤–∏–¥–∞–ª–∏–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É {broadcast_id}")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏", show_alert=True)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_confirm_delete_recurring_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫
@router.callback_query(F.data == "adm:broadcast_stats")
async def admin_broadcast_stats_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—Å–∏–ª–æ–∫"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫\n\n" \
               "üì§ –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n" \
               "‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: 0\n" \
               "‚ùå –ü–æ–º–∏–ª–æ–∫: 0\n" \
               "üìà –°–µ—Ä–µ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞: 0%\n\n" \
               "üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –ø–µ—Ä—à–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫."
        
        await callback.message.edit_text(
            text,
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_broadcast_stats_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—Å–∏–ª–æ–∫")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data.startswith("broadcast:schedule_"), BroadcastStates.selecting_schedule)
async def broadcast_schedule_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        schedule_type = callback.data.split("_")[1]  # now, later, recurring
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å—Ç–∞–Ω—É
        data = await state.get_data()
        
        if schedule_type == "now":
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É
            await state.update_data(
                schedule_type="immediate",
                schedule_time="–æ–¥—Ä–∞–∑—É"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await state.set_state(BroadcastStates.confirming_broadcast)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –û–¥—Ä–∞–∑—É

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
            """
            
            await callback.message.edit_text(
                confirm_text,
                reply_markup=broadcast_confirm_keyboard()
            )
            
        elif schedule_type == "later":
            # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
            await state.set_state(BroadcastStates.waiting_for_datetime)
            
            await callback.message.edit_text(
                "üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "**–î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•**\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: `19.01.2025 15:30`\n\n"
                "‚è∞ –ß–∞—Å –≤–∫–∞–∑—É—î—Ç—å—Å—è –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º (UTC+2)",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            
        elif schedule_type == "recurring":
            # –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            await state.set_state(BroadcastStates.selecting_recurring)
            
            await callback.message.edit_text(
                "üîÑ –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:",
                reply_markup=broadcast_recurring_type_keyboard()
            )
        
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–±—Ä–∞–≤ —Ç–∏–ø –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: {schedule_type}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_schedule_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data == "broadcast:confirm_send", BroadcastStates.confirming_broadcast)
async def broadcast_confirm_send_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å—Ç–∞–Ω—É
        data = await state.get_data()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        users = await get_users_by_segment(data['audience_type'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
        if data.get('schedule_type') == 'immediate':
            # –ú–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
            broadcast_id = await save_broadcast(
                admin_id=user_id,
                message_text=data['message_text'],
                audience=data['audience_type'],
                status="sent"
            )
            
        elif data.get('schedule_type') == 'scheduled':
            # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            broadcast_id = await save_broadcast(
                admin_id=user_id,
                message_text=data['message_text'],
                audience=data['audience_type'],
                scheduled_for=data['scheduled_datetime'],
                status="pending"
            )
            
        elif data.get('schedule_type') == 'recurring':
            # –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            broadcast_id = await save_recurring_broadcast(
                admin_id=user_id,
                message_text=data['message_text'],
                audience=data['audience_type'],
                recurring_type=data['recurring_type'],
                cron_expression=data['cron_expression']
            )
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏
        if data.get('schedule_type') == 'immediate':
            # –ú–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            await callback.message.edit_text(
                f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É...\n\n"
                f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n"
                f"üìù –¢–µ–∫—Å—Ç: {data['message_text'][:50]}...",
                reply_markup=None
            )
            
            # –Ü–º—ñ—Ç—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É (–ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É)
            sent_count = 0
            error_count = 0
            
            # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ —ñ–º—ñ—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
            sent_count = len(users)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏—Ç—Ç—î–≤–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            result_text = f"""
‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ü–æ–º–∏–ª–æ–∫: {error_count}
üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {round(sent_count / len(users) * 100, 1)}%

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:50]}...
üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
            """
            
        elif data.get('schedule_type') == 'scheduled':
            # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            result_text = f"""
‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ!

üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {data['schedule_time']}
üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}...

–†–æ–∑—Å–∏–ª–∫–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å.
            """
            
        elif data.get('schedule_type') == 'recurring':
            # –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            result_text = f"""
‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!

üîÑ –†–æ–∑–∫–ª–∞–¥: {data['recurring_name']}
üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}...

–†–æ–∑—Å–∏–ª–∫–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º.
            """
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            result_text = f"""
‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞!

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}
üìù –¢–µ–∫—Å—Ç: {data['message_text'][:50]}...
            """
        
        await callback.message.edit_text(
            result_text,
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É {broadcast_id} –¥–ª—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_confirm_send_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏")
        await state.clear()

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data == "broadcast:cancel")
async def broadcast_cancel_handler(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_cancel_handler: {e}")

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É
@router.callback_query(F.data == "broadcast:back_to_audience", BroadcastStates.selecting_schedule)
async def broadcast_back_to_audience_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó"""
    try:
        await state.set_state(BroadcastStates.selecting_audience)
        await callback.message.edit_text(
            "üë• –û–±–µ—Ä—ñ—Ç—å –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=broadcast_audience_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_back_to_audience_handler: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏/—á–∞—Å—É
@router.message(BroadcastStates.waiting_for_datetime)
async def broadcast_datetime_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        datetime_str = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏/—á–∞—Å—É
        pattern = r'^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$'
        match = re.match(pattern, datetime_str)
        
        if not match:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: **–î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•**\n"
                "–ü—Ä–∏–∫–ª–∞–¥: `19.01.2025 15:30`",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        day, month, year, hour, minute = match.groups()
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç datetime
            scheduled_datetime = datetime(
                int(year), int(month), int(day), 
                int(hour), int(minute)
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
            if scheduled_datetime <= datetime.now():
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É\n\n"
                    "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å:",
                    reply_markup=broadcast_datetime_keyboard()
                )
                return
            
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å\n\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å:",
                reply_markup=broadcast_datetime_keyboard()
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –≤ —Å—Ç–∞–Ω
        await state.update_data(
            schedule_type="scheduled",
            schedule_time=scheduled_datetime.strftime("%d.%m.%Y %H:%M"),
            scheduled_datetime=scheduled_datetime.isoformat()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {data['schedule_time']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–∞–ø–ª–∞–Ω—É–≤–∞–≤ —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞ {data['schedule_time']}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_datetime_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏/—á–∞—Å—É")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
@router.callback_query(F.data.startswith("broadcast:recurring_"), BroadcastStates.selecting_recurring)
async def broadcast_recurring_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        recurring_type = callback.data.split("_")[1]  # daily, weekly, monthly, custom
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∏–ø—ñ–≤ —Ç–∞ CRON –≤–∏—Ä–∞–∑—ñ–≤
        cron_expressions = {
            "daily": "0 12 * * *",      # –©–æ–¥–Ω—è –æ 12:00
            "weekly": "0 12 * * 1",     # –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 12:00
            "monthly": "0 12 1 * *",    # 1-–≥–æ —á–∏—Å–ª–∞ –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è –æ 12:00
        }
        
        recurring_names = {
            "daily": "üìÖ –©–æ–¥–µ–Ω–Ω–æ (12:00)",
            "weekly": "üìÜ –©–æ—Ç–∏–∂–Ω–µ–≤–æ (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 12:00)",
            "monthly": "üóìÔ∏è –©–æ–º—ñ—Å—è—Ü—è (1-–≥–æ —á–∏—Å–ª–∞, 12:00)",
            "custom": "‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥"
        }
        
        if recurring_type == "custom":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è CRON
            await state.set_state(BroadcastStates.waiting_for_cron)
            
            await callback.message.edit_text(
                "‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
                "–í–≤–µ–¥—ñ—Ç—å CRON –≤–∏—Ä–∞–∑:\n\n"
                "**–§–æ—Ä–º–∞—Ç:** `—Ö–≤–∏–ª–∏–Ω–∞ –≥–æ–¥–∏–Ω–∞ –¥–µ–Ω—å –º—ñ—Å—è—Ü—å –¥–µ–Ω—å_—Ç–∏–∂–Ω—è`\n\n"
                "**–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
                "‚Ä¢ `0 9 * * *` - —â–æ–¥–Ω—è –æ 9:00\n"
                "‚Ä¢ `0 18 * * 5` - —â–æ–ø'—è—Ç–Ω–∏—Ü—ñ –æ 18:00\n"
                "‚Ä¢ `30 14 1,15 * *` - 1-–≥–æ —ñ 15-–≥–æ —á–∏—Å–ª–∞ –æ 14:30",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–∏–ø–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
            await state.update_data(
                schedule_type="recurring",
                recurring_type=recurring_type,
                recurring_name=recurring_names[recurring_type],
                cron_expression=cron_expressions[recurring_type]
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await state.set_state(BroadcastStates.confirming_broadcast)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            data = await state.get_data()
            
            confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üîÑ –†–æ–∑–∫–ª–∞–¥: {data['recurring_name']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
            """
            
            await callback.message.edit_text(
                confirm_text,
                reply_markup=broadcast_confirm_keyboard()
            )
        
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–±—Ä–∞–≤ —Ç–∏–ø —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {recurring_type}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_recurring_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")

# –û–±—Ä–æ–±–Ω–∏–∫ CRON –≤–∏—Ä–∞–∑—É
@router.message(BroadcastStates.waiting_for_cron)
async def broadcast_cron_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è CRON –≤–∏—Ä–∞–∑—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        cron_expression = message.text.strip()
        
        # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è CRON –≤–∏—Ä–∞–∑—É (5 —á–∞—Å—Ç–∏–Ω —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–ª–∞–º–∏)
        parts = cron_expression.split()
        if len(parts) != 5:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CRON –≤–∏—Ä–∞–∑\n\n"
                "–ú–∞—î –±—É—Ç–∏ 5 —á–∞—Å—Ç–∏–Ω —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–ª–∞–º–∏:\n"
                "`—Ö–≤–∏–ª–∏–Ω–∞ –≥–æ–¥–∏–Ω–∞ –¥–µ–Ω—å –º—ñ—Å—è—Ü—å –¥–µ–Ω—å_—Ç–∏–∂–Ω—è`",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ CRON –≤–∏—Ä–∞–∑
        await state.update_data(
            schedule_type="recurring",
            recurring_type="custom",
            recurring_name=f"‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ ({cron_expression})",
            cron_expression=cron_expression
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üîÑ –†–æ–∑–∫–ª–∞–¥: {data['recurring_name']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤–≤—ñ–≤ CRON –≤–∏—Ä–∞–∑: {cron_expression}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_cron_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CRON –≤–∏—Ä–∞–∑—É")

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
@router.callback_query(F.data == "broadcast:back_to_schedule")
async def broadcast_back_to_schedule_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è"""
    try:
        await state.set_state(BroadcastStates.selecting_schedule)
        
        data = await state.get_data()
        await callback.message.edit_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: {data['audience_name']}\n"
            f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ: {data['users_count']}\n\n"
            f"üìÖ –ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?",
            reply_markup=broadcast_schedule_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_back_to_schedule_handler: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
@router.callback_query(F.data == "broadcast:edit_message", BroadcastStates.confirming_broadcast)
async def broadcast_edit_message_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        await state.set_state(BroadcastStates.editing_message)
        
        await callback.message.edit_text(
            "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
            "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n"
            "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –º–µ–¥—ñ–∞ (—Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ).",
            reply_markup=broadcast_back_to_menu_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} —Ä–µ–¥–∞–≥—É—î —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_edit_message_handler: {e}")

@router.callback_query(F.data == "broadcast:edit_audience", BroadcastStates.confirming_broadcast)
async def broadcast_edit_audience_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–º—ñ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
        await state.set_state(BroadcastStates.editing_audience)
        
        await callback.message.edit_text(
            "üë• –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=broadcast_audience_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–º—ñ–Ω—é—î –∞—É–¥–∏—Ç–æ—Ä—ñ—é —Ä–æ–∑—Å–∏–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_edit_audience_handler: {e}")

@router.callback_query(F.data == "broadcast:edit_schedule", BroadcastStates.confirming_broadcast)
async def broadcast_edit_schedule_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–º—ñ–Ω–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        await state.set_state(BroadcastStates.editing_schedule)
        
        data = await state.get_data()
        await callback.message.edit_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: {data['audience_name']}\n"
            f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ: {data['users_count']}\n\n"
            f"üìÖ –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=broadcast_schedule_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–º—ñ–Ω—é—î –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_edit_schedule_handler: {e}")

# –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –ø—Ä—è–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
@router.message(BroadcastStates.editing_message)
async def broadcast_editing_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç
        message_text = message.text or message.caption or ""
        if not message_text:
            await message.answer(
                "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç.\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                reply_markup=broadcast_back_to_menu_keyboard()
            )
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(
            message_text=message_text,
            message_id=message.message_id
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if data.get('schedule_type') == 'immediate':
            schedule_info = "üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –û–¥—Ä–∞–∑—É"
        elif data.get('schedule_type') == 'scheduled':
            schedule_info = f"üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {data.get('schedule_time', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        elif data.get('schedule_type') == 'recurring':
            schedule_info = f"üîÑ –†–æ–∑–∫–ª–∞–¥: {data.get('recurring_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        else:
            schedule_info = "üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
{schedule_info}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–Ω–æ–≤–∏–≤ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_message_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É")

@router.callback_query(F.data.startswith("broadcast:audience_"), BroadcastStates.editing_audience)
async def broadcast_editing_audience_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        audience_type = callback.data.split("_")[1]  # all, buyers, inactive
        
        audience_names = {
            "all": "üë• –£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            "buyers": "üí∞ –ü–æ–∫—É–ø—Ü—ñ –∫—É—Ä—Å—ñ–≤", 
            "inactive": "üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ 7+ –¥–Ω—ñ–≤"
        }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ
        users_count = len(await get_users_by_segment(audience_type))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ
        if users_count == 0:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç—ñ: {audience_names[audience_type]}\n\n"
                "üë• –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:",
                reply_markup=broadcast_audience_keyboard()
            )
            await callback.answer()
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—é –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(
            audience_type=audience_type,
            audience_name=audience_names[audience_type],
            users_count=users_count
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if data.get('schedule_type') == 'immediate':
            schedule_info = "üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –û–¥—Ä–∞–∑—É"
        elif data.get('schedule_type') == 'scheduled':
            schedule_info = f"üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {data.get('schedule_time', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        elif data.get('schedule_type') == 'recurring':
            schedule_info = f"üîÑ –†–æ–∑–∫–ª–∞–¥: {data.get('recurring_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        else:
            schedule_info = "üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
{schedule_info}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–Ω–æ–≤–∏–≤ –∞—É–¥–∏—Ç–æ—Ä—ñ—é —Ä–æ–∑—Å–∏–ª–∫–∏: {audience_type}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_audience_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó")

@router.callback_query(F.data.startswith("broadcast:schedule_"), BroadcastStates.editing_schedule)
async def broadcast_editing_schedule_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        schedule_type = callback.data.split("_")[1]  # now, later, recurring
        
        if schedule_type == "now":
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É
            await state.update_data(
                schedule_type="immediate",
                schedule_time="–æ–¥—Ä–∞–∑—É"
            )
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await state.set_state(BroadcastStates.confirming_broadcast)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            data = await state.get_data()
            
            confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: –û–¥—Ä–∞–∑—É

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
            """
            
            await callback.message.edit_text(
                confirm_text,
                reply_markup=broadcast_confirm_keyboard()
            )
            
        elif schedule_type == "later":
            # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
            await state.set_state(BroadcastStates.editing_datetime)
            
            await callback.message.edit_text(
                "üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "**–î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•**\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: `19.01.2025 15:30`\n\n"
                "‚è∞ –ß–∞—Å –≤–∫–∞–∑—É—î—Ç—å—Å—è –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º (UTC+2)",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            
        elif schedule_type == "recurring":
            # –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            await state.set_state(BroadcastStates.editing_recurring)
            
            await callback.message.edit_text(
                "üîÑ –†–µ–≥—É–ª—è—Ä–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:",
                reply_markup=broadcast_recurring_type_keyboard()
            )
        
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–º—ñ–Ω—é—î –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏: {schedule_type}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_schedule_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è")

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏/—á–∞—Å—É —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—ñ
@router.message(BroadcastStates.editing_datetime)
async def broadcast_editing_datetime_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏/—á–∞—Å—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        datetime_str = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏/—á–∞—Å—É
        pattern = r'^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$'
        match = re.match(pattern, datetime_str)
        
        if not match:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: **–î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•**\n"
                "–ü—Ä–∏–∫–ª–∞–¥: `19.01.2025 15:30`",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        day, month, year, hour, minute = match.groups()
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç datetime
            scheduled_datetime = datetime(
                int(year), int(month), int(day), 
                int(hour), int(minute)
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
            if scheduled_datetime <= datetime.now():
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É\n\n"
                    "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å:",
                    reply_markup=broadcast_datetime_keyboard()
                )
                return
            
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å\n\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å:",
                reply_markup=broadcast_datetime_keyboard()
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –≤ —Å—Ç–∞–Ω
        await state.update_data(
            schedule_type="scheduled",
            schedule_time=scheduled_datetime.strftime("%d.%m.%Y %H:%M"),
            scheduled_datetime=scheduled_datetime.isoformat()
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üìÖ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {data['schedule_time']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–Ω–æ–≤–∏–≤ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {data['schedule_time']}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_datetime_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏/—á–∞—Å—É")

@router.callback_query(F.data.startswith("broadcast:recurring_"), BroadcastStates.editing_recurring)
async def broadcast_editing_recurring_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        recurring_type = callback.data.split("_")[1]  # daily, weekly, monthly, custom
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∏–ø—ñ–≤ —Ç–∞ CRON –≤–∏—Ä–∞–∑—ñ–≤
        cron_expressions = {
            "daily": "0 12 * * *",      # –©–æ–¥–Ω—è –æ 12:00
            "weekly": "0 12 * * 1",     # –©–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 12:00
            "monthly": "0 12 1 * *",    # 1-–≥–æ —á–∏—Å–ª–∞ –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è –æ 12:00
        }
        
        recurring_names = {
            "daily": "üìÖ –©–æ–¥–µ–Ω–Ω–æ (12:00)",
            "weekly": "üìÜ –©–æ—Ç–∏–∂–Ω–µ–≤–æ (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 12:00)",
            "monthly": "üóìÔ∏è –©–æ–º—ñ—Å—è—Ü—è (1-–≥–æ —á–∏—Å–ª–∞, 12:00)",
            "custom": "‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥"
        }
        
        if recurring_type == "custom":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è CRON
            await state.set_state(BroadcastStates.editing_cron)
            
            await callback.message.edit_text(
                "‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ —Ä–æ–∑—Å–∏–ª–∫–∏\n\n"
                "–í–≤–µ–¥—ñ—Ç—å CRON –≤–∏—Ä–∞–∑:\n\n"
                "**–§–æ—Ä–º–∞—Ç:** `—Ö–≤–∏–ª–∏–Ω–∞ –≥–æ–¥–∏–Ω–∞ –¥–µ–Ω—å –º—ñ—Å—è—Ü—å –¥–µ–Ω—å_—Ç–∏–∂–Ω—è`\n\n"
                "**–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
                "‚Ä¢ `0 9 * * *` - —â–æ–¥–Ω—è –æ 9:00\n"
                "‚Ä¢ `0 18 * * 5` - —â–æ–ø'—è—Ç–Ω–∏—Ü—ñ –æ 18:00\n"
                "‚Ä¢ `30 14 1,15 * *` - 1-–≥–æ —ñ 15-–≥–æ —á–∏—Å–ª–∞ –æ 14:30",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–∏–ø–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫
            await state.update_data(
                schedule_type="recurring",
                recurring_type=recurring_type,
                recurring_name=recurring_names[recurring_type],
                cron_expression=cron_expressions[recurring_type]
            )
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await state.set_state(BroadcastStates.confirming_broadcast)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            data = await state.get_data()
            
            confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üîÑ –†–æ–∑–∫–ª–∞–¥: {data['recurring_name']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
            """
            
            await callback.message.edit_text(
                confirm_text,
                reply_markup=broadcast_confirm_keyboard()
            )
        
        await callback.answer()
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–Ω–æ–≤–∏–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å —Ä–æ–∑—Å–∏–ª–∫–∏: {recurring_type}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_recurring_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—ñ")

@router.message(BroadcastStates.editing_cron)
async def broadcast_editing_cron_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è CRON –≤–∏—Ä–∞–∑—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        cron_expression = message.text.strip()
        
        # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è CRON –≤–∏—Ä–∞–∑—É (5 —á–∞—Å—Ç–∏–Ω —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–ª–∞–º–∏)
        parts = cron_expression.split()
        if len(parts) != 5:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CRON –≤–∏—Ä–∞–∑\n\n"
                "–ú–∞—î –±—É—Ç–∏ 5 —á–∞—Å—Ç–∏–Ω —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–ª–∞–º–∏:\n"
                "`—Ö–≤–∏–ª–∏–Ω–∞ –≥–æ–¥–∏–Ω–∞ –¥–µ–Ω—å –º—ñ—Å—è—Ü—å –¥–µ–Ω—å_—Ç–∏–∂–Ω—è`",
                reply_markup=broadcast_datetime_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ CRON –≤–∏—Ä–∞–∑
        await state.update_data(
            schedule_type="recurring",
            recurring_type="custom",
            recurring_name=f"‚öôÔ∏è –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ ({cron_expression})",
            cron_expression=cron_expression
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.set_state(BroadcastStates.confirming_broadcast)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        data = await state.get_data()
        
        confirm_text = f"""
‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É:

üìù –¢–µ–∫—Å—Ç: {data['message_text'][:100]}{'...' if len(data['message_text']) > 100 else ''}

üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {data['audience_name']}
üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {data['users_count']}
üîÑ –†–æ–∑–∫–ª–∞–¥: {data['recurring_name']}

–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=broadcast_confirm_keyboard()
        )
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –æ–Ω–æ–≤–∏–≤ CRON –≤–∏—Ä–∞–∑: {cron_expression}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_editing_cron_handler: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è CRON –≤–∏—Ä–∞–∑—É")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == "adm:settings")
async def admin_settings_handler(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=admin_settings_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_settings_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API
@router.callback_query(F.data == "adm:check_api")
async def admin_check_api_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await callback.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é API...", show_alert=False)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ZenEdu API
        zenedu_status = await check_zenedu_connection()
        
        status_text = f"""
üîó –°—Ç–∞—Ç—É—Å API –∑'—î–¥–Ω–∞–Ω—å

ZenEdu API: {'‚úÖ –ü—Ä–∞—Ü—é—î' if zenedu_status else '‚ùå –ü–æ–º–∏–ª–∫–∞'}
Monobank API: ‚ö†Ô∏è –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
Telegram API: ‚úÖ –ü—Ä–∞—Ü—é—î

–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}
        """
        
        await callback.message.edit_text(
            status_text,
            reply_markup=admin_back_to_main()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_check_api_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

# üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(F.data == "adm:user_search")
async def admin_user_search_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        await state.set_state(UserManagementStates.searching_user)
        
        await callback.message.edit_text(
            "üîç **–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:\n"
            "‚Ä¢ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–∏—Å–ª–æ)\n"
            "‚Ä¢ Username (–±–µ–∑ @)\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: `123456789` –∞–±–æ `username`",
            reply_markup=cancel_search_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} —Ä–æ–∑–ø–æ—á–∞–≤ –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_user_search_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–æ—à—É–∫—É")

@router.message(UserManagementStates.searching_user)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        query = message.text.strip()
        
        if not query:
            await message.answer(
                "‚ùå –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É\n\n"
                "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ username:",
                reply_markup=cancel_search_keyboard()
            )
            return
        
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        results = await search_users(query)
        
        if not results:
            await message.answer(
                f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: `{query}`\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç:",
                reply_markup=cancel_search_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
        text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:** `{query}`\n\n"
        
        for user in results[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π" if user['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            username = f"@{user['username']}" if user['username'] else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
            
            text += f"**üë§ {user['id']}**\n"
            text += f"Username: {username}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {user['joined_at'][:10]}\n\n"
        
        if len(results) > 10:
            text += f"... —Ç–∞ —â–µ {len(results) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        keyboard = []
        for user in results[:5]:  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä—à–∏—Ö 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            username_display = f"@{user['username']}" if user['username'] else f"ID: {user['id']}"
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üë§ {username_display}",
                    callback_data=f"user_detail:{user['id']}"
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton(text="üîç –ù–æ–≤–∏–π –ø–æ—à—É–∫", callback_data="adm:user_search")],
            [InlineKeyboardButton(text="üë• –ú–µ–Ω—é", callback_data="adm:users")]
        ])
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–Ω–∞–π—à–æ–≤ {len(results)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}'")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_user_search: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        await state.clear()

# üìë –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(F.data == "adm:user_list")
async def admin_user_list_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    await show_users_list(callback, page=0)

@router.callback_query(F.data.startswith("users_page:"))
async def users_page_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        page_data = callback.data.split(":")[1]
        if page_data == "current":
            await callback.answer()
            return
        
        page = int(page_data)
        await show_users_list(callback, page)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ users_page_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")

async def show_users_list(callback: CallbackQuery, page: int = 0):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        limit = 8
        offset = page * limit
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        users = await get_users_list(offset, limit)
        total_users = await get_users_count()
        total_pages = (total_users + limit - 1) // limit
        
        if not users:
            await callback.message.edit_text(
                "üìë **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=back_to_users_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = f"üìë **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
        text += f"üìä –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1} –∑ {total_pages} (–≤—Å—å–æ–≥–æ: {total_users})\n\n"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = []
        
        for user in users:
            status_icon = "üö´" if user['is_blocked'] else "‚úÖ"
            username_display = f"@{user['username']}" if user['username'] else f"ID: {user['id']}"
            
            text += f"{status_icon} **{username_display}**\n"
            text += f"ID: `{user['id']}`\n"
            text += f"–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {user['joined_at'][:10]}\n\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_icon} {username_display}",
                    callback_data=f"user_detail:{user['id']}"
                )
            ])
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        has_prev = page > 0
        has_next = page < total_pages - 1
        pagination_keyboard = users_list_pagination_keyboard(page, total_pages, has_prev, has_next)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        for i, button_row in enumerate(keyboard):
            pagination_keyboard.inline_keyboard.insert(i, button_row)
        
        await callback.message.edit_text(
            text,
            reply_markup=pagination_keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_users_list: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É")

# üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data.startswith("user_detail:"))
async def user_detail_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        target_user_id = int(callback.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = await get_user(target_user_id)
        
        if not user_data:
            await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        purchases = await get_user_purchases(target_user_id)
        
        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π" if user_data.get('is_blocked') else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
        username = f"@{user_data.get('username', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        
        text = f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user_id}**\n\n"
        text += f"üìù **Username:** {username}\n"
        text += f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n"
        text += f"üìÖ **–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è:** {user_data.get('joined_at', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"‚è∞ **–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** {user_data.get('last_activity', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        if purchases:
            text += f"üí∞ **–ü–æ–∫—É–ø–∫–∏:** {len(purchases)}\n"
            text += "**–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:**\n"
            for purchase in purchases[:3]:
                text += f"‚Ä¢ {purchase['course_title']} ({purchase['purchase_date'][:10]})\n"
            if len(purchases) > 3:
                text += f"... —Ç–∞ —â–µ {len(purchases) - 3} –ø–æ–∫—É–ø–æ–∫\n"
        else:
            text += "üí∞ **–ü–æ–∫—É–ø–∫–∏:** –ù–µ–º–∞—î\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=user_detail_keyboard(target_user_id, user_data.get('is_blocked', False)),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ user_detail_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

# üí∞ –ü–æ–∫—É–ø–∫–∏
@router.callback_query(F.data == "adm:user_purchases")
async def admin_purchases_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ–∫—É–ø–∫–∏"""
    await show_purchases_list(callback, page=0)

@router.callback_query(F.data.startswith("purchases_page:"))
async def purchases_page_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø–æ–∫—É–ø–æ–∫"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        page_data = callback.data.split(":")[1]
        if page_data == "current":
            await callback.answer()
            return
        
        page = int(page_data)
        await show_purchases_list(callback, page)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ purchases_page_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")

async def show_purchases_list(callback: CallbackQuery, page: int = 0):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        limit = 10
        offset = page * limit
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∫—É–ø–∫–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        purchases = await get_all_purchases(offset, limit)
        stats = await get_purchases_stats()
        
        if not purchases and page == 0:
            await callback.message.edit_text(
                "üí∞ **–ü–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                "‚ùå –ü–æ–∫—É–ø–æ–∫ —â–µ –Ω–µ–º–∞—î",
                reply_markup=back_to_users_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        total_purchases = stats.get('total_purchases', 0)
        total_pages = (total_purchases + limit - 1) // limit if total_purchases > 0 else 1
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = f"üí∞ **–ü–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
        
        if stats:
            text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–∫—É–ø–æ–∫: {stats.get('total_purchases', 0)}\n"
            text += f"‚Ä¢ –î–æ—Ö—ñ–¥: ‚Ç¥{stats.get('total_revenue', 0)}\n"
            text += f"‚Ä¢ –ó–∞ –º—ñ—Å—è—Ü—å: {stats.get('monthly_purchases', 0)}\n"
            text += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: ‚Ç¥{stats.get('avg_amount', 0)}\n\n"
        
        text += f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1} –∑ {total_pages}\n\n"
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        for purchase in purchases:
            username = f"@{purchase['username']}" if purchase['username'] else f"ID: {purchase['user_id']}"
            status_icon = "‚úÖ" if purchase['payment_status'] == 'completed' else "‚è≥"
            
            text += f"{status_icon} **{purchase['course_title']}**\n"
            text += f"üë§ {username}\n"
            text += f"üí∞ ‚Ç¥{purchase['amount']} ‚Ä¢ {purchase['purchase_date'][:10]}\n\n"
        
        # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
        has_prev = page > 0
        has_next = page < total_pages - 1
        
        keyboard = []
        pagination_row = []
        
        if has_prev:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"purchases_page:{page-1}"))
        
        pagination_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="purchases_page:current"))
        
        if has_next:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"purchases_page:{page+1}"))
        
        if pagination_row:
            keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.extend([
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="adm:user_purchases"),
                InlineKeyboardButton(text="üë• –ú–µ–Ω—é", callback_data="adm:users")
            ]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –ø–æ–∫—É–ø–∫–∏ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_purchases_list: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫")

# –î—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
@router.callback_query(F.data.startswith("user_action:"))
async def user_action_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        action_data = callback.data.split(":")
        action = action_data[1].split("_")[0]  # block, unblock, grant, message
        target_user_id = int(action_data[1].split("_")[1])
        
        if action == "block":
            # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            success = await block_user(target_user_id, blocked=True)
            if success:
                await callback.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                logger.info(f"–ê–¥–º—ñ–Ω {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}")
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è", show_alert=True)
                
        elif action == "unblock":
            # –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            success = await block_user(target_user_id, blocked=False)
            if success:
                await callback.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                logger.info(f"–ê–¥–º—ñ–Ω {user_id} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}")
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è", show_alert=True)
                
        elif action == "grant":
            # –í–∏–¥–∞—á–∞ –∫—É—Ä—Å—É (–∑–∞–≥–ª—É—à–∫–∞)
            await callback.answer("üöß –í–∏–¥–∞—á–∞ –∫—É—Ä—Å—É - –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)
            
        elif action == "message":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞
            await state.set_state(UserManagementStates.sending_message)
            await state.update_data(target_user_id=target_user_id)
            
            await callback.message.edit_text(
                f"‚úâÔ∏è **–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞**\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {target_user_id}\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                reply_markup=user_message_keyboard(target_user_id),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
            

            
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –¥—ñ—ó
        if action in ["block", "unblock"]:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await user_detail_handler(
                CallbackQuery(
                    id=callback.id,
                    from_user=callback.from_user,
                    message=callback.message,
                    data=f"user_detail:{target_user_id}",
                    chat_instance=callback.chat_instance
                )
            )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ user_action_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó")

@router.message(UserManagementStates.sending_message)
async def process_admin_message(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    user_id = message.from_user.id
    
    if not await is_admin(user_id):
        return
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        
        if not target_user_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await state.clear()
            return
        
        message_text = message.text
        if not message_text:
            await message.answer(
                "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                reply_markup=user_message_keyboard(target_user_id)
            )
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from main import bot
            
            await bot.send_message(
                chat_id=target_user_id,
                text=f"üì© **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{message_text}",
                parse_mode="Markdown"
            )
            
            await message.answer(
                f"‚úÖ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {target_user_id}\n"
                f"–¢–µ–∫—Å—Ç: {message_text[:100]}{'...' if len(message_text) > 100 else ''}",
                reply_markup=user_message_keyboard(target_user_id),
                parse_mode="Markdown"
            )
            
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}")
            
        except Exception as send_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}: {send_error}")
            await message.answer(
                f"‚ùå **–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user_id} –º–æ–∂–ª–∏–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –≤–∏–¥–∞–ª–∏–≤ –∞–∫–∞—É–Ω—Ç.",
                reply_markup=user_message_keyboard(target_user_id),
                parse_mode="Markdown"
            )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_admin_message: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await state.clear()

# üìä –ü–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(F.data.startswith("user_purchases:"))
async def user_purchases_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        target_user_id = int(callback.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ –ø–æ–∫—É–ø–∫–∏
        user_data = await get_user(target_user_id)
        purchases = await get_user_purchases(target_user_id)
        
        if not user_data:
            await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        username = f"@{user_data.get('username', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        
        text = f"üìä **–ü–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
        text += f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {username}\n"
        text += f"üÜî **ID:** `{target_user_id}`\n\n"
        
        if purchases:
            total_amount = sum(float(p.get('amount', 0)) for p in purchases if p.get('payment_status') == 'completed')
            text += f"üí∞ **–ü–æ–∫—É–ø–æ–∫:** {len(purchases)}\n"
            text += f"üí≥ **–°—É–º–∞:** ‚Ç¥{total_amount}\n\n"
            
            text += "**üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:**\n"
            for i, purchase in enumerate(purchases, 1):
                status_icon = "‚úÖ" if purchase['payment_status'] == 'completed' else "‚è≥"
                text += f"{i}. {status_icon} **{purchase['course_title']}**\n"
                text += f"   üí∞ ‚Ç¥{purchase['amount']} ‚Ä¢ {purchase['purchase_date'][:10]}\n\n"
        else:
            text += "‚ùå **–ü–æ–∫—É–ø–æ–∫ –Ω–µ–º–∞—î**\n"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data=f"user_detail:{target_user_id}"),
                InlineKeyboardButton(text="üìë –°–ø–∏—Å–æ–∫", callback_data="adm:user_list")
            ],
            [
                InlineKeyboardButton(text="üë• –ú–µ–Ω—é", callback_data="adm:users")
            ]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ user_purchases_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (–±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞)
@router.callback_query(F.data.in_(["adm:broadcast_stats", "adm:user_stats", "adm:courses_list", "adm:course_access"]))
async def admin_placeholder_handler(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π —â–æ —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    function_name = callback.data.replace("adm:", "").replace("_", " ").title()
    await callback.answer(f"üöß {function_name} - –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)
    logger.info(f"–ê–¥–º—ñ–Ω {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é: {callback.data}")

# –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == "adm:system_settings")
async def admin_system_settings_handler(callback: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        import os
        import platform
        from config import DATABASE_PATH, ADMIN_ID
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        system_info = f"""
üîß **–°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**

üíª **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –û–°: {platform.system()} {platform.release()}
‚Ä¢ Python: {platform.python_version()}
‚Ä¢ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}

üìä **–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:**
‚Ä¢ –®–ª—è—Ö: `{DATABASE_PATH}`
‚Ä¢ –†–æ–∑–º—ñ—Ä: {os.path.getsize(DATABASE_PATH) / 1024:.1f} KB

üë§ **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:**
‚Ä¢ ID: `{ADMIN_ID}`
‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: `{user_id}`

ü§ñ **–ë–æ—Ç:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–∞—Ü—é—î
‚Ä¢ –†–µ–∂–∏–º: –ü—Ä–æ–¥–∞–∫—à–Ω
        """
        
        await callback.message.edit_text(
            system_info,
            reply_markup=admin_back_to_main(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logger.info(f"–ê–¥–º—ñ–Ω {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_system_settings_handler: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

# –ë–µ–∫–∞–ø –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
@router.callback_query(F.data == "adm:backup_db")
async def admin_backup_db_handler(callback: CallbackQuery):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    user_id = callback.from_user.id
    
    if not await is_admin(user_id):
        await callback.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    try:
        import os
        import shutil
        from datetime import datetime
        from config import DATABASE_PATH
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –±–µ–∫–∞–ø—É
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"backup_db_{timestamp}.sqlite"
        backup_path = os.path.join(os.path.dirname(DATABASE_PATH), backup_filename)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        if not os.path.exists(DATABASE_PATH):
            await callback.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É
        await callback.message.edit_text(
            "üì¶ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...**\n\n"
            "‚è≥ –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...",
            reply_markup=None,
            parse_mode="Markdown"
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø (–∫–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª)
        shutil.copy2(DATABASE_PATH, backup_path)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—ñ–≤
        original_size = os.path.getsize(DATABASE_PATH)
        backup_size = os.path.getsize(backup_path)
        
        if backup_size == original_size:
            success_text = f"""
‚úÖ **–ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**

üìÑ **–§–∞–π–ª:** `{backup_filename}`
üìç **–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** `{backup_path}`
üìä **–†–æ–∑–º—ñ—Ä:** {backup_size / 1024:.1f} KB
‚è∞ **–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –±–µ–∫–∞–ø–∏ –≤ –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å—Ç–≤–æ—Ä—é–π—Ç–µ –Ω–æ–≤—ñ –±–µ–∫–∞–ø–∏
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –±–µ–∫–∞–ø—ñ–≤
            """
            
            await callback.message.edit_text(
                success_text,
                reply_markup=admin_back_to_main(),
                parse_mode="Markdown"
            )
            
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} —Å—Ç–≤–æ—Ä–∏–≤ –±–µ–∫–∞–ø –ë–î: {backup_filename}")
            
        else:
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–≤–¥–∞–ª–∏–π –±–µ–∫–∞–ø
            if os.path.exists(backup_path):
                os.remove(backup_path)
                
            await callback.message.edit_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É**\n\n"
                "–†–æ–∑–º—ñ—Ä–∏ —Ñ–∞–π–ª—ñ–≤ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=admin_back_to_main(),
                parse_mode="Markdown"
            )
            
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_backup_db_handler: {e}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–≤–¥–∞–ª–∏–π –±–µ–∫–∞–ø
        try:
            if 'backup_path' in locals() and os.path.exists(backup_path):
                os.remove(backup_path)
        except:
            pass
            
        await callback.message.edit_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É**\n\n"
            f"–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)[:100]}",
            reply_markup=admin_back_to_main(),
            parse_mode="Markdown"
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É") 