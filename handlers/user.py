"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ PrometeyLabs Bot
"""

import logging
from typing import Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID, SERVICES
from db import add_user, get_user, update_user_activity, get_courses, check_course_access, get_course
from keyboards import (
    main_menu, services_menu, website_service_keyboard, service_contact_keyboard,
    courses_menu, course_card_keyboard, online_resources_keyboard, about_company_keyboard,
    portfolio_keyboard, back_to_about_keyboard
)
from messages import (
    WELCOME_MESSAGE, SERVICES_MAIN_MESSAGE,
    WEBSITE_SERVICE_MESSAGE, TELEGRAM_BOT_SERVICE_MESSAGE, CRM_SERVICE_MESSAGE,
    SOCIAL_MEDIA_SERVICE_MESSAGE, COURSES_MAIN_MESSAGE,
    course_card_message, ONLINE_RESOURCES_MESSAGE, ABOUT_COMPANY_MESSAGE,
    PORTFOLIO_MESSAGE, WHY_US_MESSAGE, PAYMENT_INFO_MESSAGE, ERROR_MESSAGE,
    COMMAND_NOT_FOUND_MESSAGE
)

logger = logging.getLogger(__name__)
router = Router()

@router.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    try:
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        await add_user(user_id, username)
        await update_user_activity(user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
        if user_id == ADMIN_ID:
            # –î–ª—è –∞–¥–º—ñ–Ω–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å
            from keyboards import admin_main_menu
            from messages import ADMIN_WELCOME_MESSAGE
            
            await message.answer(
                ADMIN_WELCOME_MESSAGE,
                reply_markup=admin_main_menu()
            )
            logger.info(f"–ê–¥–º—ñ–Ω {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
        else:
            # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –º–µ–Ω—é
            await message.answer(
                WELCOME_MESSAGE,
                reply_markup=main_menu(user_id)
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start_handler: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(Command('help'))
async def help_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=main_menu(user_id)
    )

@router.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        WELCOME_MESSAGE,
        reply_markup=main_menu(user_id)
    )
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–ª–æ–∫—É "–ü–æ—Å–ª—É–≥–∏"
@router.callback_query(F.data.startswith("srv:"))
async def services_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ—Å–ª—É–≥"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    action = callback.data.split(":", 1)[1]
    
    try:
        if action == "main":
            await callback.message.edit_text(
                SERVICES_MAIN_MESSAGE,
                reply_markup=services_menu(user_id)
            )
        
        elif action == "website":
            await callback.message.edit_text(
                WEBSITE_SERVICE_MESSAGE,
                reply_markup=website_service_keyboard()
            )
        
        elif action == "telegram_bot":
            await callback.message.edit_text(
                TELEGRAM_BOT_SERVICE_MESSAGE,
                reply_markup=service_contact_keyboard("telegram_bot")
            )
        
        elif action == "crm":
            await callback.message.edit_text(
                CRM_SERVICE_MESSAGE,
                reply_markup=service_contact_keyboard("crm")
            )
        
        elif action == "social_media":
            await callback.message.edit_text(
                SOCIAL_MEDIA_SERVICE_MESSAGE,
                reply_markup=service_contact_keyboard("social_media")
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ services_handler –¥–ª—è action '{action}': {e}")
        logger.error(f"–ü–æ–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞", show_alert=True)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–ª–æ–∫—É "–ö—É—Ä—Å–∏"
@router.callback_query(F.data.startswith("crs:"))
async def courses_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫—É—Ä—Å—ñ–≤ - –ø—Ä–∞—Ü—é—î –∑ ZenEdu"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    action = callback.data.split(":", 1)[1]
    
    try:
        if action == "main":
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –∑ –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ ZenEdu)
            courses = await get_courses()
            
            if not courses:
                # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫—É—Ä—Å–∏
                from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –∑ ZenEdu", 
                        callback_data="crs:sync"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", 
                        callback_data="main_menu"
                    )]
                ])
                
                await callback.message.edit_text(
                    "üìö **–ö—É—Ä—Å–∏ PrometeyLabs**\n\n"
                    "üîÑ –ö—É—Ä—Å–∏ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ ZenEdu –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏ –∑ ZenEdu
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                
                keyboard = []
                for course in courses:
                    keyboard.append([InlineKeyboardButton(
                        text=f"üéì {course['title']} - {course['price_uah']} ‚Ç¥",
                        callback_data=f"crs:view_{course['id']}"
                    )])
                
                keyboard.extend([
                    [InlineKeyboardButton(
                        text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∑ ZenEdu", 
                        callback_data="crs:sync"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", 
                        callback_data="main_menu"
                    )]
                ])
                
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                
                await callback.message.edit_text(
                    "üìö **–ö—É—Ä—Å–∏ PrometeyLabs**\n\n"
                    "üéØ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –∫—É—Ä—Å–∏ –≤—ñ–¥ –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤:\n"
                    "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏\n"
                    "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤\n"
                    "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
        
        elif action == "sync":
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑ ZenEdu
            from services.zenedu_client import sync_courses
            
            await callback.message.edit_text(
                "üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ ZenEdu...**\n\n"
                "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—É—Ä—Å–∏ –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏...",
                parse_mode="Markdown"
            )
            
            synced_count = await sync_courses()
            
            if synced_count > 0:
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìö –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—É—Ä—Å–∏", 
                        callback_data="crs:main"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", 
                        callback_data="main_menu"
                    )]
                ])
                
                await callback.message.edit_text(
                    f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                    f"üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫—É—Ä—Å—ñ–≤: {synced_count}\n"
                    f"üîó –î–∂–µ—Ä–µ–ª–æ: ZenEdu –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n\n"
                    f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –∫—É–ø—É–≤–∞—Ç–∏ –∫—É—Ä—Å–∏!",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó**\n\n"
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –∑ ZenEdu.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="Markdown"
                )
        
        elif action.startswith("view_"):
            course_id = int(action.split("_")[1])
            course = await get_course(course_id)
            
            if not course:
                await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫—É—Ä—Å—É
            has_access = await check_course_access(user_id, course_id)
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—É—Ä—Å
            message_text = course_card_message(
                title=course['title'],
                description=course['description'],
                price=course['price_uah']
            )
            
            await callback.message.edit_text(
                message_text,
                reply_markup=course_card_keyboard(
                    course_id=course_id,
                    has_access=has_access,
                    z_link=course['z_link'],
                    price=course['price_uah']
                ),
                parse_mode="Markdown"
            )
        
        elif action.startswith("demo_"):
            # –î–µ–º–æ-—É—Ä–æ–∫ (–ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞)
            await callback.answer(
                "üé¨ –î–µ–º–æ-—É—Ä–æ–∫–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ZenEdu –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏",
                show_alert=True
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ courses_handler: {e}")
        await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞", show_alert=True)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–ª–æ–∫—É "–û–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å–∏"
@router.callback_query(F.data == "online_resources")
async def online_resources_handler(callback: CallbackQuery):
    """–û–Ω–ª–∞–π–Ω —Ä–µ—Å—É—Ä—Å–∏"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        ONLINE_RESOURCES_MESSAGE,
        reply_markup=online_resources_keyboard(user_id)
    )
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–ª–æ–∫—É "–ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é"
@router.callback_query(F.data == "about_company")
async def about_company_handler(callback: CallbackQuery):
    """–ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        ABOUT_COMPANY_MESSAGE,
        reply_markup=about_company_keyboard(user_id)
    )
    await callback.answer()

@router.callback_query(F.data == "portfolio")
async def portfolio_handler(callback: CallbackQuery):
    """–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        PORTFOLIO_MESSAGE,
        reply_markup=portfolio_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "why_us")
async def why_us_handler(callback: CallbackQuery):
    """–ß–æ–º—É –º–∏"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        WHY_US_MESSAGE,
        reply_markup=back_to_about_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "payment_info")
async def payment_info_handler(callback: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    await callback.message.edit_text(
        PAYMENT_INFO_MESSAGE,
        reply_markup=back_to_about_keyboard()
    )
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
@router.message()
async def unknown_message_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    
    # –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥
    if user_id == ADMIN_ID and message.text and message.text.startswith('/'):
        return
    
    await message.answer(
        COMMAND_NOT_FOUND_MESSAGE,
        reply_markup=main_menu(user_id)
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤
@router.callback_query()
async def unknown_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤"""
    user_id = callback.from_user.id
    await update_user_activity(user_id)
    
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback –≤—ñ–¥ {user_id}: {callback.data}")
    await callback.answer("–§—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True) 