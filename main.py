#!/usr/bin/env python3
"""
PrometeyLabs Telegram Bot
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é webhook —Ç–∞ polling
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ PATH
sys.path.insert(0, str(Path(__file__).parent))

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web, web_app

from db import init_db
from config import BOT_TOKEN, ADMIN_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Render
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN.split(':')[0]}"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-app.onrender.com")

async def health_check(request):
    """Health check endpoint –¥–ª—è Render"""
    return web.Response(text="OK", status=200)

async def on_startup():
    """–§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ –∑ middleware
        from handlers import user, admin, payments
        from middleware.auth import AuthMiddleware
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
        dp.include_router(admin.router)  # –ê–¥–º—ñ–Ω —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä—à–∏–º
        dp.include_router(payments.router)
        dp.include_router(user.router)   # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–Ω—ñ–º
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è –¥–µ–ø–ª–æ—é
        if os.getenv("ENVIRONMENT") == "production":
            webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
            await bot.set_webhook(
                url=webhook_url,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ Webhook –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π: {webhook_url}")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - –≤–∏–¥–∞–ª—è—î–º–æ webhook
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")
        
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è @PrometeyLabs (ADMIN_ID: {ADMIN_ID})")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        raise

async def on_shutdown():
    """–§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ"""
    try:
        session = await bot.get_session()
        await session.close()
        logger.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        await on_startup()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        if os.getenv("ENVIRONMENT") == "production":
            # –†–µ–∂–∏–º webhook –¥–ª—è Render
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ webhook –¥–ª—è Render")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            port = int(os.getenv("PORT", 8000))
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–± –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è health check
            app = web.Application()
            app.router.add_get('/health', health_check)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, "0.0.0.0", port)
            await site.start()
            
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –¥–ª—è –æ–±—Ä–æ–±–∫–∏ webhook
            await dp.start_polling(bot, skip_updates=True)
            
        else:
            # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏")
            await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        await on_shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1) 