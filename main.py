#!/usr/bin/env python3
"""
PrometeyLabs Telegram Bot
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é webhook —Ç–∞ polling
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ PATH
sys.path.insert(0, str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import Response

from handlers import user, admin, payments
from middleware.auth import AuthMiddleware
from db import init_db
from config import BOT_TOKEN, ADMIN_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Render
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN.split(':')[0]}"
WEBHOOK_SECRET = "PrometeyLabs_webhook_secret_2025"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-app.onrender.com")

async def on_startup(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è middleware
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä—ñ–≤ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
        dp.include_router(admin.router)  # –ê–¥–º—ñ–Ω —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä—à–∏–º
        dp.include_router(payments.router)  # –ü–ª–∞—Ç–µ–∂—ñ –¥—Ä—É–≥–∏–º–∏  
        dp.include_router(user.router)  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–º
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è –¥–µ–ø–ª–æ—é
        if os.getenv("ENVIRONMENT") == "production":
            webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
            await bot.set_webhook(
                url=webhook_url,
                secret_token=WEBHOOK_SECRET,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ Webhook –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π: {webhook_url}")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - –≤–∏–¥–∞–ª—è—î–º–æ webhook
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")
        
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è @PrometeyLabs (ADMIN_ID: {ADMIN_ID})")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        raise

async def on_shutdown(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ"""
    try:
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")

async def health_check(request: Request) -> Response:
    """Health check –¥–ª—è Render"""
    return Response(
        text="PrometeyLabs Bot OK",
        status=200,
        headers={"Content-Type": "text/plain"}
    )

def create_app() -> web.Application:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è aiohttp –¥–æ–¥–∞—Ç–∫—É –¥–ª—è webhook"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫
    app = web.Application()
    
    # –î–æ–¥–∞—î–º–æ health check endpoint
    app.router.add_get("/health", health_check)
    app.router.add_get("/", health_check)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    if os.getenv("ENVIRONMENT") == "production":
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ webhook
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
            secret_token=WEBHOOK_SECRET
        )
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ webhook –º–∞—Ä—à—Ä—É—Ç
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è aiogram
        setup_application(app, dp, bot=bot)
    
    return app

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        await on_startup(bot)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        if os.getenv("ENVIRONMENT") == "production":
            # –†–µ–∂–∏–º webhook –¥–ª—è Render
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ webhook –¥–ª—è Render")
            # –î–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Gunicorn/Uvicorn
            return create_app()
        else:
            # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        if os.getenv("ENVIRONMENT") != "production":
            await on_shutdown(bot)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –¥–ª—è ASGI —Å–µ—Ä–≤–µ—Ä—ñ–≤ (Gunicorn/Uvicorn)
app = create_app()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1) 