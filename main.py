#!/usr/bin/env python3
"""
PrometeyLabs Telegram Bot
–ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–ü–ò–°–ê–ù–ê –í–ï–†–°–Ü–Ø –î–õ–Ø –£–ù–ò–ö–ù–ï–ù–ù–Ø WEBHOOK/POLLING –ö–û–ù–§–õ–Ü–ö–¢–Ü–í
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ PATH
sys.path.insert(0, str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from db import init_db
from config import BOT_TOKEN, ADMIN_ID, ENVIRONMENT, WEBHOOK_URL, PORT

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ú–Ü–ù–ù–ò–• –û–¢–û–ß–ï–ù–ù–Ø
logger.info("=" * 80)
logger.info("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–°–ö–£ PROMETEYLABS BOT")
logger.info("=" * 80)
logger.info(f"üìä ENVIRONMENT: '{ENVIRONMENT}' (—Ç–∏–ø: {type(ENVIRONMENT)})")
logger.info(f"üåê WEBHOOK_URL: '{WEBHOOK_URL}'")
logger.info(f"üî¢ PORT: {PORT}")
logger.info(f"ü§ñ BOT_TOKEN: {BOT_TOKEN[:20]}...")
logger.info(f"üë§ ADMIN_ID: {ADMIN_ID}")

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ os.getenv
raw_env = os.getenv('ENVIRONMENT')
logger.info(f"üîé RAW ENVIRONMENT –∑ os.getenv: '{raw_env}' (—Ç–∏–ø: {type(raw_env)})")

# –ö–†–ò–¢–ò–ß–ù–ò–ô –ë–õ–û–ö –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –†–ï–ñ–ò–ú–£
if ENVIRONMENT == "production" or raw_env == "production":
    FORCE_WEBHOOK_MODE = True
    logger.info("‚úÖ –†–ï–ñ–ò–ú: PRODUCTION - –ü–†–ò–ú–£–°–û–í–ò–ô WEBHOOK!")
else:
    FORCE_WEBHOOK_MODE = False
    logger.info("‚ö†Ô∏è –†–ï–ñ–ò–ú: DEVELOPMENT - –î–û–ó–í–û–õ–ï–ù–ò–ô POLLING")
logger.info("=" * 80)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è webhook
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN.split(':')[0]}"

async def health_check(request):
    """Health check endpoint –¥–ª—è Render"""
    return web.Response(text="PrometeyLabs Bot is running! üöÄ", status=200)

async def setup_handlers():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è handlers —Ç–∞ middleware"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ –∑ middleware
        from handlers import user, admin, payments
        from middleware.auth import AuthMiddleware
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
        dp.include_router(admin.router)  # –ê–¥–º—ñ–Ω —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä—à–∏–º
        dp.include_router(payments.router)
        dp.include_router(user.router)   # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–Ω—ñ–º
        
        logger.info(f"‚úÖ Handlers –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –¥–ª—è @PrometeyLabs (ADMIN_ID: {ADMIN_ID})")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è handlers: {e}")
        raise

async def force_webhook_mode():
    """–ü–†–ò–ú–£–°–û–í–ï –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è production"""
    try:
        logger.info("üîß –ü–†–ò–ú–£–°–û–í–ï –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook...")
        
        # –°–ø–æ—á–∞—Ç–∫—É –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–∏–¥–∞–ª—è—î–º–æ –±—É–¥—å-—è–∫—ñ webhook'–∏
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üóëÔ∏è –í—Å—ñ —Å—Ç–∞—Ä—ñ webhook'–∏ –í–ò–î–ê–õ–ï–ù–û")
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        await asyncio.sleep(2)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π webhook
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        result = await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
        
        if result:
            logger.info(f"‚úÖ WEBHOOK –£–°–ü–Ü–®–ù–û –í–°–¢–ê–ù–û–í–õ–ï–ù–ò–ô: {webhook_url}")
        else:
            logger.error("‚ùå –ü–û–ú–ò–õ–ö–ê –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø WEBHOOK!")
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ webhook
        webhook_info = await bot.get_webhook_info()
        logger.info(f"üîç Webhook status: {webhook_info.url}")
        logger.info(f"üîç Pending updates: {webhook_info.pending_update_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê WEBHOOK: {e}")
        raise

async def force_polling_mode():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è polling –¥–ª—è development"""
    try:
        logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è polling —Ä–µ–∂–∏–º—É...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ webhook –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è polling: {e}")
        raise

async def create_webhook_app():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–± –¥–æ–¥–∞—Ç–∫—É –¥–ª—è webhook"""
    app = web.Application()
    
    # Health check endpoints
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    setup_application(app, dp, bot=bot)
    
    logger.info(f"üåê Webhook –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    logger.info(f"üì° Webhook endpoint: {WEBHOOK_PATH}")
    
    return app

async def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö WEBHOOK –°–ï–†–í–ï–†–ê –î–õ–Ø RENDER")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await setup_handlers()
    await force_webhook_mode()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    app = await create_webhook_app()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ 0.0.0.0:{PORT}")
    logger.info("üéØ WEBHOOK –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ù–ò–ô - POLLING –ó–ê–ë–û–†–û–ù–ï–ù–ò–ô!")
    
    # –¢—Ä–∏–º–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–º –ë–ï–ó POLLING!
    try:
        await asyncio.Event().wait()
    except asyncio.CancelledError:
        logger.info("‚èπÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    finally:
        await runner.cleanup()

async def start_polling_server():
    """–ó–∞–ø—É—Å–∫ polling —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è development"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö POLLING –°–ï–†–í–ï–†–ê –î–õ–Ø –†–û–ó–†–û–ë–ö–ò")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await setup_handlers()
    await force_polling_mode()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
    logger.info("üéØ POLLING –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ù–ò–ô - WEBHOOK –í–ò–î–ê–õ–ï–ù–ò–ô!")
    await dp.start_polling(bot, skip_updates=True)

async def shutdown():
    """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ"""
    try:
        session = await bot.get_session()
        if session:
            await session.close()
        logger.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")

async def main():
    """–ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó –ü–†–ò–ú–£–°–û–í–ò–ú –†–ï–ñ–ò–ú–û–ú"""
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö PROMETEYLABS BOT...")
        
        # –ö–†–ò–¢–ò–ß–ù–ï –†–Ü–®–ï–ù–ù–Ø: –ü–†–ò–ú–£–°–û–í–ò–ô WEBHOOK –î–õ–Ø PRODUCTION
        if FORCE_WEBHOOK_MODE:
            logger.info("üéØ –ü–†–ò–ú–£–°–û–í–ò–ô WEBHOOK –†–ï–ñ–ò–ú")
            await start_webhook_server()
        else:
            logger.info("üéØ –î–û–ó–í–û–õ–ï–ù–ò–ô POLLING –†–ï–ñ–ò–ú")
            await start_polling_server()
            
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        raise
    finally:
        await shutdown()

if __name__ == '__main__':
    try:
        # –ó–ê–ü–£–°–ö –ë–ï–ó –ú–û–ñ–õ–ò–í–û–°–¢–Ü –ö–û–ù–§–õ–Ü–ö–¢–£
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        sys.exit(1) 