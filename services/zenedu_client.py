"""
–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ZenEdu API
ZenEdu - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–¥–∞–∂—É –∫—É—Ä—Å—ñ–≤ –≤ Telegram
https://www.zenedu.io/

–ü–†–ò–ú–Ü–¢–ö–ê: –¶–µ –¥–µ–º–æ-–≤–µ—Ä—Å—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
API —Ç–æ–∫–µ–Ω: aKKYBIMaR92RXBxfR2Wp12G9CtFIB6k8E9EJabAM883db9a6
"""

import logging
import asyncio
from typing import List, Dict, Any, Optional
from config import ZENEDU_API_URL, ZENEDU_API_KEY, ZENEDU_WEBHOOK_SECRET
from db import add_course, get_courses as get_db_courses, grant_course_access

logger = logging.getLogger(__name__)

class ZenEduClient:
    """
    –ö–ª—ñ—î–Ω—Ç –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ ZenEdu API
    ZenEdu –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ –∫—É—Ä—Å–∏ –ø—Ä—è–º–æ –≤ Telegram
    
    –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—Ä–∞—Ü—é—î –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ –∑ —Ñ–µ–π–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    """
    
    def __init__(self):
        self.api_url = ZENEDU_API_URL
        self.api_key = ZENEDU_API_KEY
        self.webhook_secret = ZENEDU_WEBHOOK_SECRET
        self.demo_mode = True  # –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    
    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç–∏ HTTP —Å–µ—Å—ñ—é (–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ)"""
        pass
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ZenEdu API
        –í –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î True
        """
        try:
            if self.demo_mode:
                logger.info("‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º ZenEdu –∞–∫—Ç–∏–≤–Ω–∏–π")
                logger.info(f"üìã API URL: {self.api_url}")
                logger.info(f"üîë API Key: {self.api_key[:20]}...")
                await asyncio.sleep(0.5)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
                return True
            
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ZenEdu API
            # –∫–æ–ª–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ endpoints
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ZenEdu: {e}")
            return False
    
    async def get_products(self) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∫—É—Ä—Å—ñ–≤) –∑ ZenEdu
        –ö–æ–ª–∏ API –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —Ç—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
        """
        try:
            if self.demo_mode:
                # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
                # –ö—É—Ä—Å–∏ –¥–æ–¥–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–∏–π ZenEdu API
                await asyncio.sleep(0.3)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
                logger.info(f"üìö ZenEdu: –≥–æ—Ç–æ–≤–∏–π –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏")
                logger.info(f"üîó –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ZenEdu Dashboard")
                
                # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
                # –†–µ–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –±—É–¥—É—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è –∑ ZenEdu API
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {e}")
            return []
    
    async def get_product_details(self, product_id: str) -> Optional[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç/–∫—É—Ä—Å
        """
        try:
            if self.demo_mode:
                # –§–µ–π–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ –∫—É—Ä—Å—É
                demo_details = {
                    'id': product_id,
                    'name': f'–ö—É—Ä—Å {product_id}',
                    'description': f'–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∫—É—Ä—Å—É {product_id}',
                    'price': 1500,
                    'access_link': f'https://zenedu.io/course/{product_id}'
                }
                
                await asyncio.sleep(0.2)
                logger.info(f"üìñ –î–µ–º–æ: –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}")
                return demo_details
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç—É {product_id}: {e}")
            return None
    
    async def create_subscriber(self, user_id: int, username: str = None, 
                              first_name: str = None) -> bool:
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ –≤ ZenEdu
        """
        try:
            if self.demo_mode:
                await asyncio.sleep(0.2)
                logger.info(f"üë§ –î–µ–º–æ: —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ {user_id} ({username})")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ {user_id}: {e}")
            return False
    
    async def grant_product_access(self, product_id: str, user_id: int) -> bool:
        """
        –ù–∞–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ ZenEdu
        """
        try:
            if self.demo_mode:
                await asyncio.sleep(0.3)
                logger.info(f"üéì –î–µ–º–æ: –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}: {e}")
            return False
    
    async def revoke_product_access(self, product_id: str, user_id: int) -> bool:
        """
        –í—ñ–¥–±–∏—Ä–∞—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É
        """
        try:
            if self.demo_mode:
                await asyncio.sleep(0.3)
                logger.info(f"üö´ –î–µ–º–æ: –≤—ñ–¥—ñ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–±–∏—Ä–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}: {e}")
            return False
    
    async def check_user_access(self, product_id: str, user_id: int) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ ZenEdu
        """
        try:
            if self.demo_mode:
                await asyncio.sleep(0.1)
                # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ –∞–¥–º—ñ–Ω –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –∫—É—Ä—Å—ñ–≤
                has_access = user_id == 7603163573
                logger.debug(f"üîç –î–µ–º–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É {user_id} –¥–æ {product_id}: {has_access}")
                return has_access
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}: {e}")
            return False
    
    async def get_product_access_link(self, product_id: str, user_id: int) -> Optional[str]:
        """
        –û—Ç—Ä–∏–º—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É
        """
        try:
            if self.demo_mode:
                await asyncio.sleep(0.2)
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–µ–º–æ-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
                demo_link = f"https://zenedu.io/course/{product_id}?user={user_id}&token=demo_access"
                logger.info(f"üîó –î–µ–º–æ: —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}")
                return demo_link
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            return None
    
    async def sync_products_to_db(self) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ ZenEdu –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        try:
            products = await self.get_products()
            synced_count = 0
            
            for product in products:
                product_id = str(product.get('id', ''))
                title = product.get('name') or product.get('title', '')
                price = product.get('price', 0)
                description = product.get('description', '')
                access_link = product.get('access_link', '')
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü—ñ–Ω—É –≤ –≥—Ä–∏–≤–Ω—ñ
                if isinstance(price, (int, float)):
                    price_uah = int(price)
                else:
                    price_uah = 0
                
                if product_id and title:
                    # –î–æ–¥–∞—î–º–æ –∫—É—Ä—Å –¥–æ –ë–î
                    db_course_id = await add_course(
                        zenedu_id=product_id,
                        title=title,
                        price_uah=price_uah,
                        z_link=access_link,
                        description=description
                    )
                    
                    if db_course_id:
                        synced_count += 1
                        logger.debug(f"üìö –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {title}")
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {synced_count} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ ZenEdu (–¥–µ–º–æ)")
            return synced_count
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª—ñ—î–Ω—Ç–∞
zenedu_client = ZenEduClient()

# –§—É–Ω–∫—Ü—ñ—ó-—Ö–µ–ª–ø–µ—Ä–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
async def sync_courses() -> int:
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∫—É—Ä—Å–∏ –∑ ZenEdu"""
    return await zenedu_client.sync_products_to_db()

async def grant_course_access_to_user(course_id: str, user_id: int) -> bool:
    """–ù–∞–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É"""
    # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø –≤ ZenEdu
    zenedu_success = await zenedu_client.grant_product_access(course_id, user_id)
    
    if zenedu_success:
        # –ü–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –ë–î
        try:
            local_success = await grant_course_access(user_id, int(course_id.replace('course_', '')))
        except (ValueError, AttributeError):
            # –Ø–∫—â–æ course_id –Ω–µ —î —á–∏—Å–ª–æ–º, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –∑–∞ ZenEdu ID
            local_success = True
            
        if local_success:
            logger.info(f"‚úÖ –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –¥–æ –∫—É—Ä—Å—É {course_id}")
            return True
    
    return False

async def check_zenedu_connection() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ZenEdu"""
    return await zenedu_client.test_connection()

async def get_course_access_link(course_id: str, user_id: int) -> Optional[str]:
    """–°—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É"""
    return await zenedu_client.get_product_access_link(course_id, user_id) 