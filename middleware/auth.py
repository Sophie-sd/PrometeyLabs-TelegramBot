"""
Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è PrometeyLabs Bot
–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
"""

import logging
from typing import Callable, Dict, Any, Awaitable, Union
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from config import ADMIN_ID
from db import get_user, add_user

logger = logging.getLogger(__name__)

class AuthMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    –ë–ª–æ–∫—É—î —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–µ–∞–¥–º—ñ–Ω—ñ–≤
    """

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        """
        –õ–æ–≥—É—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π
        """
        user_id = None
        
        # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        if not user_id:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ –ø–æ–¥—ñ—ó")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∞/—Ñ—É–Ω–∫—Ü—ñ—è
        is_admin_action = await self.is_admin_action(event)
        
        if is_admin_action and user_id != ADMIN_ID:
            # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –±–ª–æ–∫—É—î–º–æ –¥–ª—è –Ω–µ–∞–¥–º—ñ–Ω—ñ–≤
            await self.send_admin_only_message(event)
            logger.warning(f"–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π –≤—ñ–¥ –Ω–µ–∞–¥–º—ñ–Ω–∞ {user_id}")
            return
        
        # –õ–æ–≥—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await self.log_user_activity(user_id, event)
        
        # –ü–µ—Ä–µ–¥–∞—î–º–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–ª—ñ
        return await handler(event, data)
    
    async def is_admin_action(self, event: Union[Message, CallbackQuery]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ü–µ –∞–¥–º—ñ–Ω –¥—ñ—è
        """
        if isinstance(event, Message):
            if event.text:
                # –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
                admin_commands = ['/admin', '/broadcast', '/users', '/analytics', '/settings']
                return any(event.text.startswith(cmd) for cmd in admin_commands)
        
        elif isinstance(event, CallbackQuery):
            if event.data:
                # –ê–¥–º—ñ–Ω callback'–∏
                admin_callbacks = ['adm:', 'broadcast:', 'admin_', 'manage_']
                return any(event.data.startswith(prefix) for prefix in admin_callbacks)
        
        return False
    
    async def send_admin_only_message(self, event: Union[Message, CallbackQuery]):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π
        """
        try:
            admin_message = "üîí –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            if isinstance(event, Message):
                await event.answer(admin_message)
            elif isinstance(event, CallbackQuery):
                await event.answer(admin_message, show_alert=True)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–¥–º—ñ–Ω –æ–±–º–µ–∂–µ–Ω–Ω—è: {e}")
    
    async def log_user_activity(self, user_id: int, event: Union[Message, CallbackQuery]):
        """
        –õ–æ–≥—É—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        try:
            # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
            if isinstance(event, Message):
                username = event.from_user.username
                await add_user(user_id, username)
                
                # –õ–æ–≥—É—î–º–æ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                if event.text:
                    if event.text.startswith('/'):
                        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É: {event.text}")
                    else:
                        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            
            elif isinstance(event, CallbackQuery):
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {event.data}")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª–µ–π
async def is_admin(user_id: int) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º
    """
    return user_id == ADMIN_ID

async def is_user_authorized(user_id: int) -> bool:
    """
    –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
    """
    return True 